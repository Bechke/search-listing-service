plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.3.6'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.avast.gradle.docker-compose' version '0.17.12'
	id 'com.google.cloud.tools.jib' version '3.4.0'
}

group = 'rita.artha.shastra'
version = ''

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudGcpVersion', "5.8.0")
	set('springCloudVersion', "2023.0.4")
}

def loadEnvFile() {
	File envFile = rootProject.file('.env')
	if (envFile.exists()) {
		envFile.eachLine { line ->
			if (line && !line.startsWith("#")) {
				def (key, value) = line.split('=', 2)
				if (key && value) {
					ext[key.trim()] = value.trim()
					System.setProperty(key.trim(), value.trim())
					println "Loaded env var: ${key.trim()}=${value.trim()}"
				}
			}
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.google.cloud:spring-cloud-gcp-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.mysql:mysql-connector-j'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
	implementation 'org.projectlombok:lombok:1.18.36'
	annotationProcessor 'org.projectlombok:lombok:1.18.36'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
}

dependencyManagement {
	imports {
		mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	loadEnvFile()
	useJUnitPlatform()
}

dockerCompose {
	useComposeFiles = ["${rootDir}/compose.yaml"]
}
